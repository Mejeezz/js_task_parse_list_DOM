{"version":3,"sources":["scripts/main.js"],"names":["sortList","fullList","document","querySelector","items","childNodes","itemsArr","i","nodeType","push","sort","itemPrev","itemNext","dataset","salary","split","filter","item","isNaN","join","length","appendChild","getEmployees","objectsArr","map","name","innerText"],"mappings":";AAAA,aAqDY,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAnDZ,SAASA,IACDC,IAAAA,EAAWC,SAASC,cAAc,MAClCC,EAAQH,EAASI,WACjBC,EAAW,GAEZ,IAAA,IAAMC,KAAKH,EACY,IAAtBA,EAAMG,GAAGC,UACXF,EAASG,KAAKL,EAAMG,IAIxBD,EAASI,KAAK,SAACC,EAAUC,GAErB,OAACD,EAASE,QAAQC,OACfC,MAAM,IACNC,OAAO,SAAAC,GAAQ,OAACC,MAAMD,KAAOE,KAAK,KAEpCP,EAASC,QAAQC,OACfC,MAAM,IACNC,OAAO,SAAAC,GAAQ,OAACC,MAAMD,KAAOE,KAAK,MAIpC,IAAA,IAAIZ,EAAI,EAAGA,EAAID,EAASc,OAAQb,IACnCN,EAASoB,YAAYf,EAASC,IAGzBD,OAAAA,EAGT,SAASgB,IACDrB,IACAG,EADWF,SAASC,cAAc,MACjBE,WACjBC,EAAW,GAEZ,IAAA,IAAMC,KAAKH,EACY,IAAtBA,EAAMG,GAAGC,UACXF,EAASG,KAAKL,EAAMG,IAUjBgB,OANYjB,EAASkB,IAAI,SAAAP,GAAI,OAAA,EAAA,CAEhCQ,KAAMR,EAAKS,WAAcT,EAAKJ,WAOpCb,IACAsB","file":"main.4f19ebee.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nfunction sortList() {\n  const fullList = document.querySelector('ul');\n  const items = fullList.childNodes;\n  const itemsArr = [];\n\n  for (const i in items) {\n    if (items[i].nodeType === 1) {\n      itemsArr.push(items[i]);\n    }\n  }\n\n  itemsArr.sort((itemPrev, itemNext) => {\n    return (\n      +itemPrev.dataset.salary\n        .split('')\n        .filter(item => !isNaN(item)).join('')\n    ) - (\n      +itemNext.dataset.salary\n        .split('')\n        .filter(item => !isNaN(item)).join('')\n    );\n  });\n\n  for (let i = 0; i < itemsArr.length; i++) {\n    fullList.appendChild(itemsArr[i]);\n  }\n\n  return itemsArr;\n}\n\nfunction getEmployees() {\n  const fullList = document.querySelector('ul');\n  const items = fullList.childNodes;\n  const itemsArr = [];\n\n  for (const i in items) {\n    if (items[i].nodeType === 1) {\n      itemsArr.push(items[i]);\n    }\n  }\n\n  const objectsArr = itemsArr.map(item => (\n    {\n      name: item.innerText, ...item.dataset,\n    }\n  ));\n\n  return objectsArr;\n}\n\nsortList();\ngetEmployees();\n"]}